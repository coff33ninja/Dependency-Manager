"""
Requirements management for the portable dependency checker
"""
from typing import Dict, List
import json
import os

class RequirementsManager:
    # Default requirements structure
    DEFAULT_REQUIREMENTS = {
        'core': {
            'PyQt6': '>=6.4.0',
            'numpy': '>=1.24.0',
        },
        'speech': {
            'TTS': '>=0.17.6',
            'pyttsx3': '>=2.90',
            'openai-whisper': '>=20231117',
            'sounddevice': '>=0.4.6',
        },
        'optional': {
            'pytest': '>=7.0.0',  # For running tests
            'black': '>=22.0.0',  # For code formatting
        }
    }

    def __init__(self, requirements_file: str = "requirements.json"):
        self.requirements_file = requirements_file
        self.requirements = self.load_requirements()

    def load_requirements(self) -> Dict:
        """Load requirements from JSON file or use defaults"""
        try:
            with open(self.requirements_file, 'r') as f:
                return json.load(f)
        except FileNotFoundError:
            return self.DEFAULT_REQUIREMENTS

    def save_requirements(self):
        """Save current requirements to JSON file"""
        with open(self.requirements_file, 'w') as f:
            json.dump(self.requirements, f, indent=4)

    def get_all_requirements(self) -> Dict:
        """Get all requirements as a flat dictionary"""
        all_reqs = {}
        for category in self.requirements.values():
            all_reqs.update(category)
        return all_reqs

    def get_category_requirements(self, category: str) -> Dict:
        """Get requirements for a specific category"""
        return self.requirements.get(category, {})

    def generate_requirements_txt(self) -> str:
        """Generate requirements.txt content"""
        lines = [
            "# Generated by portable dependency checker",
            "# Core dependencies",
        ]
        
        for package, version in self.requirements['core'].items():
            lines.append(f"{package}{version}")
        
        lines.extend([
            "",
            "# Speech synthesis and recognition"
        ])
        
        for package, version in self.requirements['speech'].items():
            lines.append(f"{package}{version}")
        
        lines.extend([
            "",
            "# Optional dependencies"
        ])
        
        for package, version in self.requirements['optional'].items():
            lines.append(f"# {package}{version}  # Optional")
        
        return "\n".join(lines)

    def save_requirements_txt(self, path: str = "requirements.txt"):
        """Save requirements to requirements.txt file"""
        content = self.generate_requirements_txt()
        with open(path, 'w') as f:
            f.write(content)

    def add_requirement(self, category: str, package: str, version: str):
        """Add a new requirement"""
        if category not in self.requirements:
            self.requirements[category] = {}
        self.requirements[category][package] = version
        self.save_requirements()

    def remove_requirement(self, category: str, package: str):
        """Remove a requirement"""
        if category in self.requirements and package in self.requirements[category]:
            del self.requirements[category][package]
            self.save_requirements()

    def load_requirements_from_txt(self, requirements_file: str) -> None:
        """Load requirements from requirements.txt and populate the requirements dictionary"""
        with open(requirements_file, 'r') as f:
            for line in f:
                line = line.strip()
                if line and not line.startswith("#"):
                    package_info = line.split("==") if "==" in line else line.split(">=")
                    package_name = package_info[0].strip()
                    version = package_info[1].strip() if len(package_info) > 1 else ""
                    # Determine category based on package name
                    if package_name in self.DEFAULT_REQUIREMENTS['core']:
                        self.add_requirement('core', package_name, version)
                    elif package_name in self.DEFAULT_REQUIREMENTS['speech']:
                        self.add_requirement('speech', package_name, version)
                    else:
                        self.add_requirement('optional', package_name, version)

if __name__ == "__main__":
    # If run directly, print requirements.txt content
    manager = RequirementsManager()
    print(manager.generate_requirements_txt())
