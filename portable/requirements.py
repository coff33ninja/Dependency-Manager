"""Module containing all package requirements"""

REQUIREMENTS = {
    # Core dependencies
    'core': {
        'PyQt6': '>=6.4.0',
        'numpy': '>=1.24.0',
    },
    
    # Speech module
    'speech': {
        'TTS': '>=0.17.6',
        'pyttsx3': '>=2.90',
        'openai-whisper': '>=20231117',
        'sounddevice': '>=0.4.6',
    },
    
    # Optional dependencies
    'optional': {
        'pytest': '>=7.0.0',  # For running tests
        'black': '>=22.0.0',  # For code formatting
    }
}

def get_all_requirements():
    """Get all requirements as a flat dictionary"""
    all_reqs = {}
    for category in REQUIREMENTS.values():
        all_reqs.update(category)
    return all_reqs

def get_requirements_txt():
    """Generate requirements.txt content"""
    lines = [
        "# Generated by dependency_checker/requirements.py",
        "# Core dependencies",
    ]
    
    for package, version in REQUIREMENTS['core'].items():
        lines.append(f"{package}{version}")
    
    lines.extend([
        "",
        "# Speech synthesis and recognition"
    ])
    
    for package, version in REQUIREMENTS['speech'].items():
        lines.append(f"{package}{version}")
    
    lines.extend([
        "",
        "# Optional dependencies"
    ])
    
    for package, version in REQUIREMENTS['optional'].items():
        lines.append(f"# {package}{version}  # Optional"
    )
    
    return "\n".join(lines)

if __name__ == "__main__":
    # If run directly, print requirements.txt content
    print(get_requirements_txt())